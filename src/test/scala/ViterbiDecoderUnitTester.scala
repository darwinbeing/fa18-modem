package modem

import dsptools.DspTester

class ViterbiDecoderUnitTester[T <: chisel3.Data](c: ViterbiDecoder[T]) extends DspTester(c) {
  poke(c.io.out.ready, 1)
  poke(c.io.in_soft.valid, 0)
  poke(c.io.in_soft.bits.pktStart, 0)
  poke(c.io.in_soft.bits.pktEnd, 0)
  expect(c.io.out.valid, 0)
  expect(c.io.out_en2, 0)
  step(1)
  poke(c.io.in_soft.valid, 1)
  poke(c.io.in_soft.bits.pktStart, 1)
  poke(c.io.in_soft.bits.pktEnd, 0)
//  poke(c.io.in_hard(0), 1)
//  poke(c.io.in_hard(1), 1)
//  poke(c.io.in_hard(2), 1)
//  poke(c.io.in_hard(3), -1)
//  poke(c.io.in_hard(4), 1)
//  poke(c.io.in_hard(5), 1)
//  poke(c.io.in_hard(6), -1)
//  poke(c.io.in_hard(7), -1)            // rate information
  poke(c.io.in_hard(0), -1)
  poke(c.io.in_hard(1), -1)
  poke(c.io.in_hard(2), -1)
  poke(c.io.in_hard(3), -1)
  poke(c.io.in_hard(4), -1)
  poke(c.io.in_hard(5), -1)
  poke(c.io.in_hard(6), -1)
  poke(c.io.in_hard(7), -1)            // rate information
  poke(c.io.in_hard(8), -1)
  poke(c.io.in_hard(9), 1)             // reserved
  poke(c.io.in_hard(10), 1)
  poke(c.io.in_hard(11), -1)           // len 0
  poke(c.io.in_hard(12), 1)
  poke(c.io.in_hard(13), 1)            // len 1
  poke(c.io.in_hard(14), 1)
  poke(c.io.in_hard(15), -1)           // len 2
  poke(c.io.in_hard(16), 1)
  poke(c.io.in_hard(17), 1)            // len 3
  poke(c.io.in_hard(18), -1)
  poke(c.io.in_hard(19), -1)           // len 4
  poke(c.io.in_hard(20), -1)
  poke(c.io.in_hard(21), 1)            // len 5
  poke(c.io.in_hard(22), 1)
  poke(c.io.in_hard(23), -1)           // len 6
  poke(c.io.in_hard(24), -1)
  poke(c.io.in_hard(25), -1)           // len 7
  poke(c.io.in_hard(26), -1)
  poke(c.io.in_hard(27), -1)           // len 8
  poke(c.io.in_hard(28), -1)
  poke(c.io.in_hard(29), -1)           // len 9
  poke(c.io.in_hard(30), -1)
  poke(c.io.in_hard(31), -1)           // len 10
  poke(c.io.in_hard(32), -1)
  poke(c.io.in_hard(33), -1)           // len 11
  poke(c.io.in_hard(34), -1)
  poke(c.io.in_hard(35), -1)           // parity *
  poke(c.io.in_hard(36), -1)
  poke(c.io.in_hard(37), -1)           // tail 0
  poke(c.io.in_hard(38), -1)
  poke(c.io.in_hard(39), -1)           // tail 1
  poke(c.io.in_hard(40), -1)
  poke(c.io.in_hard(41), -1)           // tail 2
  poke(c.io.in_hard(42), -1)
  poke(c.io.in_hard(43), -1)           // tail 3
  poke(c.io.in_hard(44), -1)
  poke(c.io.in_hard(45), -1)           // tail 4
  poke(c.io.in_hard(46), -1)
  poke(c.io.in_hard(47), -1)           // tail 5
  expect(c.io.out_isHead, 0)
  expect(c.io.out_pktLatch, 0)
  expect(c.io.out_lenCnt, 1)
  expect(c.io.out_en1, 0)
  expect(c.io.out_en2, 0)

  step(1)
  poke(c.io.in_soft.valid, 0)
  poke(c.io.in_soft.bits.pktStart, 0)
  poke(c.io.in_soft.bits.pktEnd, 0)
  expect(c.io.out_isHead, 0)
  expect(c.io.out_pktLatch, 1)
  expect(c.io.out_lenCnt, 1)
  expect(c.io.out_en1, 0)
  expect(c.io.out_en2, 0)

  step(1) // hdr cnt 1
  expect(c.io.out_isHead, 1)
  expect(c.io.out_pktLatch, 1)
  expect(c.io.out_lenCnt, 1)
  expect(c.io.out_en1, 0)   // wrong
  expect(c.io.out_en2, 0)

  step(1) // hdr cnt 2
  expect(c.io.out_isHead, 1)
  expect(c.io.out_pktLatch, 1)
  expect(c.io.out_lenCnt, 1)
  expect(c.io.out_en1, 0)
  expect(c.io.out_en2, 0)   // wrong

  step(1) // hdr cnt 3
  expect(c.io.out_isHead, 1)
  expect(c.io.out_pktLatch, 1)
  expect(c.io.out_lenCnt, 1)
  expect(c.io.out_header_rate(0),0)
  expect(c.io.out_header_rate(1),0)
  expect(c.io.out_header_rate(2),0)
  expect(c.io.out_header_rate(3),0)
//  expect(c.io.out_header_len,26*8)
  expect(c.io.out_header_len,200)
  expect(c.io.out_en2, 0)

  step(10)  // hdr cnt 13
  expect(c.io.out_isHead, 1)
  expect(c.io.out_pktLatch, 1)
  expect(c.io.out_lenCnt, 1)
//  expect(c.io.out_header_rate(0),1)
//  expect(c.io.out_header_rate(1),0)
//  expect(c.io.out_header_rate(2),1)
//  expect(c.io.out_header_rate(3),1)
//  expect(c.io.out_header_len,26*8)
  expect(c.io.out_hdrEnd, 0)
  expect(c.io.out_en1, 0)
  expect(c.io.out_en2, 0)

  step(10)  // hdr cnt 23
  expect(c.io.out_isHead, 1)
  expect(c.io.out_pktLatch, 1)
  expect(c.io.out_lenCnt, 1)
//  expect(c.io.out_header_rate(0),1)
//  expect(c.io.out_header_rate(1),0)
//  expect(c.io.out_header_rate(2),1)
//  expect(c.io.out_header_rate(3),1)
//  expect(c.io.out_header_len,26*8)
  expect(c.io.out_hdrEnd, 1)
  expect(c.io.out_en1, 0)
  expect(c.io.out_en2, 0)

  step(1) // hdr cnt 24
  expect(c.io.out_isHead, 0)
  expect(c.io.out_pktLatch, 1)
  expect(c.io.out_lenCnt, 0)
  expect(c.io.out_hdrEnd, 0)
  expect(c.io.out_en1, 0)
  expect(c.io.out_en2, 0)

  step(1)
  poke(c.io.in_soft.valid, 1)
  poke(c.io.in_hard(0), 1)
  poke(c.io.in_hard(1), 1)
  poke(c.io.in_hard(2), 1)
  poke(c.io.in_hard(3), -1)
  poke(c.io.in_hard(4), 1)
  poke(c.io.in_hard(5), 1)
  poke(c.io.in_hard(6), -1)
  poke(c.io.in_hard(7), -1)
  poke(c.io.in_hard(8), -1)  // 0
  poke(c.io.in_hard(9), 1)
  poke(c.io.in_hard(10), 1)  // 00
  poke(c.io.in_hard(11), -1)
  poke(c.io.in_hard(12), -1) // 000
  poke(c.io.in_hard(13), -1)
  poke(c.io.in_hard(14), -1) // 0000
  poke(c.io.in_hard(15), -1)
  poke(c.io.in_hard(16), -1) // 00000
  poke(c.io.in_hard(17), -1)
  poke(c.io.in_hard(18), -1) // 000000
  poke(c.io.in_hard(19), -1)
  poke(c.io.in_hard(20), 1)
  poke(c.io.in_hard(21), 1)
  poke(c.io.in_hard(22), 1)
  poke(c.io.in_hard(23), -1)
  poke(c.io.in_hard(24), 1)
  poke(c.io.in_hard(25), 1)
  poke(c.io.in_hard(26), -1)
  poke(c.io.in_hard(27), -1)
  poke(c.io.in_hard(28), -1)
  poke(c.io.in_hard(29), 1)
  poke(c.io.in_hard(30), 1)
  poke(c.io.in_hard(31), -1)
  poke(c.io.in_hard(32), -1)
  poke(c.io.in_hard(33), -1)
  poke(c.io.in_hard(34), -1)
  poke(c.io.in_hard(35), -1)
  poke(c.io.in_hard(36), -1)
  poke(c.io.in_hard(37), -1)
  poke(c.io.in_hard(38), -1)
  poke(c.io.in_hard(39), -1)
  poke(c.io.in_hard(40), -1)
  poke(c.io.in_hard(41), -1)           // tail 2
  poke(c.io.in_hard(42), -1)
  poke(c.io.in_hard(43), -1)           // tail 3
  poke(c.io.in_hard(44), -1)
  poke(c.io.in_hard(45), -1)           // tail 4
  poke(c.io.in_hard(46), -1)
  poke(c.io.in_hard(47), -1)           // tail 5
  expect(c.io.out_isHead, 0)
  expect(c.io.out_pktLatch, 1)
  expect(c.io.out_lenCnt, 0)
  expect(c.io.out_hdrEnd, 0)
  expect(c.io.in_soft.ready, 1)
  expect(c.io.out_en1, 0)
  expect(c.io.out_en2, 0)

  step(1)
  expect(c.io.out_en1, 0)
  expect(c.io.out_en2, 0)
  expect(c.io.out.valid, 0)

  step(1)
  poke(c.io.in_soft.valid, 0)
  expect(c.io.out_bufData(0), 1)
  expect(c.io.out_bufData(0), 1)
  expect(c.io.out_pm(0), 0)
  expect(c.io.out_pm(1), 100)
  expect(c.io.out_pm(2), 100)
  expect(c.io.out_pm(3), 100)
  expect(c.io.out_sp(0), 0)
  expect(c.io.out_sp(1), 0)
  expect(c.io.out_sp(2), 0)
  expect(c.io.out_sp(3), 0)
  expect(c.io.out.valid, 0)
  expect(c.io.out_en1, 1)
  expect(c.io.out_en2, 0)

  step(1)
  poke(c.io.in_soft.valid, 0)
  expect(c.io.out_en1, 1)
  expect(c.io.out_pm(0), 2)
  expect(c.io.out_pm(1), 100)
  expect(c.io.out_pm(2), 0)
  expect(c.io.out_pm(3), 101)
  expect(c.io.out_sp(0), 0)
  expect(c.io.out_sp(1), 2)
  expect(c.io.out_sp(2), 0)
  expect(c.io.out_sp(3), 3)
  expect(c.io.out.valid, 0)
  expect(c.io.out_en2, 1)

  step(1)
  expect(c.io.out_en1, 1)
  expect(c.io.out_pm(0), 3)
  expect(c.io.out_pm(1), 1)
  expect(c.io.out_pm(2), 3)
  expect(c.io.out_pm(3), 1)
  expect(c.io.out_sp(0), 0)
  expect(c.io.out_sp(1), 2)
  expect(c.io.out_sp(2), 0)
  expect(c.io.out_sp(3), 2)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out_pm(0), 2)
  expect(c.io.out_pm(1), 2)
  expect(c.io.out_pm(2), 2)
  expect(c.io.out_pm(3), 2)
  expect(c.io.out_sp(0), 1)
  expect(c.io.out_sp(1), 3)
  expect(c.io.out_sp(2), 1)
  expect(c.io.out_sp(3), 3)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out_pm(0), 2)
  expect(c.io.out_pm(1), 3)
  expect(c.io.out_pm(2), 3)
  expect(c.io.out_pm(3), 2)
  expect(c.io.out_sp(0), 0)
  expect(c.io.out_sp(1), 3)
  expect(c.io.out_sp(2), 1)
  expect(c.io.out_sp(3), 2)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out_pm(0), 3)
  expect(c.io.out_pm(1), 2)
  expect(c.io.out_pm(2), 3)
  expect(c.io.out_pm(3), 4)
  expect(c.io.out_sp(0), 0)
  expect(c.io.out_sp(1), 3)
  expect(c.io.out_sp(2), 1)
  expect(c.io.out_sp(3), 3)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out_en1, 1)
  expect(c.io.out_pm(0), 2)
  expect(c.io.out_pm(1), 4)
  expect(c.io.out_pm(2), 4)
  expect(c.io.out_pm(3), 4)
  expect(c.io.out_sp(0), 1)
  expect(c.io.out_sp(1), 2)
  expect(c.io.out_sp(2), 1)
  expect(c.io.out_sp(3), 3)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out_pm(1), 5)
  expect(c.io.out_pm(2), 4)
  expect(c.io.out_pm(3), 4)
  expect(c.io.out_sp(0), 0)
  expect(c.io.out_sp(1), 3)
  expect(c.io.out_sp(2), 0)
  expect(c.io.out_sp(3), 2)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out_pm(0), 2)
  expect(c.io.out_pm(1), 5)
  expect(c.io.out_pm(2), 4)
  expect(c.io.out_pm(3), 4)
  expect(c.io.out_sp(0), 0)
  expect(c.io.out_sp(1), 3)
  expect(c.io.out_sp(2), 0)
  expect(c.io.out_sp(3), 2)
  expect(c.io.out.valid, 0)
  expect(c.io.out.bits(0), 1)
  expect(c.io.out.bits(1), 0)
  expect(c.io.out.bits(2), 1)
  expect(c.io.out.bits(3), 1)
  expect(c.io.out.bits(4), 0)

  step(1) // 18 & 19
  expect(c.io.out_pm(0), 2)
  expect(c.io.out_pm(1), 5)
  expect(c.io.out_pm(2), 4)
  expect(c.io.out_pm(3), 4)
  expect(c.io.out_sp(0), 0)
  expect(c.io.out_sp(1), 3)
  expect(c.io.out_sp(2), 0)
  expect(c.io.out_sp(3), 2)
  expect(c.io.out.valid, 0)

  step(1) // 20 & 21
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out.valid, 1)
  expect(c.io.out.bits(0), 1)
  expect(c.io.out.bits(1), 0)
  expect(c.io.out.bits(2), 1)
  expect(c.io.out.bits(3), 1)
  expect(c.io.out.bits(4), 0)

  step(1)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out.valid, 0)

  step(1)
  expect(c.io.out.valid, 1)
  expect(c.io.out.bits(0), 0)
  expect(c.io.out.bits(1), 0)
  expect(c.io.out.bits(2), 0)
  expect(c.io.out.bits(3), 0)
  expect(c.io.out.bits(4), 0)

  step(5)
  expect(c.io.out.valid, 1)
  expect(c.io.out.bits(0), 1)
  expect(c.io.out.bits(1), 0)
  expect(c.io.out.bits(2), 1)
  expect(c.io.out.bits(3), 1)
  expect(c.io.out.bits(4), 0)
}

object FixedViterbiDecoderTester {
  def apply(params: FixedCoding): Boolean = {
    chisel3.iotesters.Driver.execute(Array("-tbn", "firrtl", "-fiwv"), () => new ViterbiDecoder(params)) {
      c => new ViterbiDecoderUnitTester(c)
    }
  }
}

//  poke(c.io.inReady, 1)
//  poke(c.io.out.ready, 1)
//  poke(c.io.in(0), 1)
//  poke(c.io.in(1), 1)
//  poke(c.io.in(2), 1)
//  poke(c.io.in(3), -1)
//  poke(c.io.in(4), 1)
//  poke(c.io.in(5), 1)
//  poke(c.io.in(6), -1)
//  poke(c.io.in(7), -1)
//  poke(c.io.in(8), -1)  // 0
//  poke(c.io.in(9), 1)
//  poke(c.io.in(10), 1)  // 00
//  poke(c.io.in(11), -1)
//  poke(c.io.in(12), -1) // 000
//  poke(c.io.in(13), -1)
//  poke(c.io.in(14), -1) // 0000
//  poke(c.io.in(15), -1)
//  poke(c.io.in(16), -1) // 00000
//  poke(c.io.in(17), -1)
//  poke(c.io.in(18), -1) // 000000
//  poke(c.io.in(19), -1)
//  expect(c.io.out_dp(0), 0)
//  expect(c.io.out_dp(1), 0)
//  expect(c.io.out_pm(0), 0)
//  expect(c.io.out_pm(1), 0)
//  expect(c.io.out_pm(2), 0)
//  expect(c.io.out_pm(3), 0)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 0)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 0)
//  expect(c.io.out.valid, 0)
//  step(1)                                   // 11, o_cnt = 2
//  expect(c.io.out_dp(0), 1)
//  expect(c.io.out_dp(1), 1)
//  expect(c.io.out_pm(0), 0)
//  expect(c.io.out_pm(1), 100)
//  expect(c.io.out_pm(2), 100)
//  expect(c.io.out_pm(3), 100)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 0)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 0)
//  expect(c.io.out.valid, 0)
//  step(1)                                   // 10, o_cnt = 4
//  expect(c.io.out_dp(0), 1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 2)
//  expect(c.io.out_pm(1), 100)
//  expect(c.io.out_pm(2), 0)
//  expect(c.io.out_pm(3), 101)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 2)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 3)
//  expect(c.io.out.valid, 0)
//  step(1)                                   // 01, o_cnt = 6
//  expect(c.io.out_dp(0), 1)
//  expect(c.io.out_dp(1), 1)
//  expect(c.io.out_pm(0), 3)
//  expect(c.io.out_pm(1), 1)
//  expect(c.io.out_pm(2), 3)
//  expect(c.io.out_pm(3), 1)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 2)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 2)
//  expect(c.io.out.valid, 0)
//  step(1)                                   // 11, o_cnt = 8
//  expect(c.io.out_dp(0), -1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 2)
//  expect(c.io.out_pm(1), 2)
//  expect(c.io.out_pm(2), 2)
//  expect(c.io.out_pm(3), 2)
//  expect(c.io.out_sp(0), 1)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 1)
//  expect(c.io.out_sp(3), 3)
//  expect(c.io.out.valid, 0)
//  step(1)
//  expect(c.io.out_dp(0), -1)
//  expect(c.io.out_dp(1), 1)
//  expect(c.io.out_pm(0), 2)
//  expect(c.io.out_pm(1), 3)
//  expect(c.io.out_pm(2), 3)
//  expect(c.io.out_pm(3), 2)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 1)
//  expect(c.io.out_sp(3), 2)
//  expect(c.io.out.valid, 0)
//  step(1)
//  expect(c.io.out_dp(0), 1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 3)
//  expect(c.io.out_pm(1), 2)
//  expect(c.io.out_pm(2), 3)
//  expect(c.io.out_pm(3), 4)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 1)
//  expect(c.io.out_sp(3), 3)
//  expect(c.io.out.valid, 0)
//  step(1)
//  expect(c.io.out_dp(0), -1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 2)
//  expect(c.io.out_pm(1), 4)
//  expect(c.io.out_pm(2), 4)
//  expect(c.io.out_pm(3), 4)
//  expect(c.io.out_sp(0), 1)
//  expect(c.io.out_sp(1), 2)
//  expect(c.io.out_sp(2), 1)
//  expect(c.io.out_sp(3), 3)
//  expect(c.io.out.valid, 0)
//  step(1)
//  expect(c.io.out_dp(0), -1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 2)
//  expect(c.io.out_pm(1), 5)
//  expect(c.io.out_pm(2), 4)
//  expect(c.io.out_pm(3), 4)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 2)
//  expect(c.io.out.valid, 0)
//  step(1)
//  expect(c.io.out_dp(0), -1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 2)
//  expect(c.io.out_pm(1), 5)
//  expect(c.io.out_pm(2), 4)
//  expect(c.io.out_pm(3), 4)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 2)
//  expect(c.io.out.valid, 0)
//  step(1)
//  expect(c.io.out_dp(0), -1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 2)
//  expect(c.io.out_pm(1), 5)
//  expect(c.io.out_pm(2), 4)
//  expect(c.io.out_pm(3), 4)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 2)
//  expect(c.io.out.bits(0), 0)
//  expect(c.io.out.bits(1), 0)
//  expect(c.io.out.bits(2), 1)
//  expect(c.io.out.bits(3), 0)
//  expect(c.io.out.bits(4), 1)
//  expect(c.io.out.valid, 1)
//  poke(c.io.in(0), 1)
//  poke(c.io.in(1), 1)
//  poke(c.io.in(2), 1)
//  poke(c.io.in(3), -1)
//  poke(c.io.in(4), 1)
//  poke(c.io.in(5), 1)
//  poke(c.io.in(6), -1)
//  poke(c.io.in(7), -1)
//  poke(c.io.in(8), -1)
//  poke(c.io.in(9), 1)
//  poke(c.io.in(10), 1)
//  poke(c.io.in(11), -1)
//  poke(c.io.in(12), -1)
//  poke(c.io.in(13), -1)
//  poke(c.io.in(14), -1)
//  poke(c.io.in(15), -1)
//  poke(c.io.in(16), -1)
//  poke(c.io.in(17), -1)
//  poke(c.io.in(18), -1)
//  poke(c.io.in(19), -1)
//  step(1)                                   // 11, o_cnt = 2
//  expect(c.io.out_dp(0), 1)
//  expect(c.io.out_dp(1), 1)
//  expect(c.io.out_pm(0), 2)
//  expect(c.io.out_pm(1), 5)
//  expect(c.io.out_pm(2), 4)
//  expect(c.io.out_pm(3), 4)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 2)
//  expect(c.io.out.valid, 0)
//  step(1)                                   // 10, o_cnt = 4
//  expect(c.io.out_dp(0), 1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 4)
//  expect(c.io.out_pm(1), 4)
//  expect(c.io.out_pm(2), 2)
//  expect(c.io.out_pm(3), 5)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 2)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 3)
//  expect(c.io.out.valid, 0)
//  step(1)                                   // 01, o_cnt = 6
//  expect(c.io.out_dp(0), 1)
//  expect(c.io.out_dp(1), 1)
//  expect(c.io.out_pm(0), 4)
//  expect(c.io.out_pm(1), 3)
//  expect(c.io.out_pm(2), 5)
//  expect(c.io.out_pm(3), 3)
//  expect(c.io.out_sp(0), 1)
//  expect(c.io.out_sp(1), 2)
//  expect(c.io.out_sp(2), 0)
//  expect(c.io.out_sp(3), 2)
//  expect(c.io.out.valid, 0)
//  step(1)
//  expect(c.io.out_dp(0), -1)
//  expect(c.io.out_dp(1), -1)
//  expect(c.io.out_pm(0), 4)
//  expect(c.io.out_pm(1), 4)
//  expect(c.io.out_pm(2), 4)
//  expect(c.io.out_pm(3), 4)
//  expect(c.io.out_sp(0), 1)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 1)
//  expect(c.io.out_sp(3), 3)
//  expect(c.io.out.valid, 0)
//  step(1)
//  expect(c.io.out_dp(0), -1)
//  expect(c.io.out_dp(1), 1)
//  expect(c.io.out_pm(0), 4)
//  expect(c.io.out_pm(1), 5)
//  expect(c.io.out_pm(2), 5)
//  expect(c.io.out_pm(3), 4)
//  expect(c.io.out_sp(0), 0)
//  expect(c.io.out_sp(1), 3)
//  expect(c.io.out_sp(2), 1)
//  expect(c.io.out_sp(3), 2)
//  expect(c.io.out.bits(0), 1)
//  expect(c.io.out.bits(1), 0)
//  expect(c.io.out.bits(2), 0)
//  expect(c.io.out.bits(3), 0)
//  expect(c.io.out.bits(4), 0)
//  expect(c.io.out.valid, 1)
//  step(5)
//  expect(c.io.out.bits(0), 0)
//  expect(c.io.out.bits(1), 0)
//  expect(c.io.out.bits(2), 1)
//  expect(c.io.out.bits(3), 0)
//  expect(c.io.out.bits(4), 1)
//  expect(c.io.out.valid, 1)